{"version":3,"sources":["Features/Weather/reducer.ts","Features/Weather/saga.ts","store/sagas.js","store/reducers.ts","store/index.ts","components/Chip.tsx","Features/Weather/Weather.tsx","components/Header.tsx","components/Wrapper.tsx","components/CardHeader.tsx","Features/API-Chart/ChartCard.jsx","Features/API-Chart/ListSelect.jsx","components/ChartContainer.jsx","App.tsx","index.js"],"names":["slice","createSlice","name","initialState","temperatureinCelsius","temperatureinFahrenheit","description","locationName","reducers","weatherDataRecevied","state","action","payload","weatherApiErrorReceived","reducer","actions","apiErrorReceived","watchApiError","call","toast","error","takeEvery","WeatherActions","type","root","spawn","weatherSaga","weather","weatherReducer","combineReducers","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","client","createClient","url","getWeather","value","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","getWeatherForLocation","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","title","CardHeader","GET_MEASUREMENTS","gql","props","queryTime","Date","epochTime","setMinutes","getMinutes","queryTimeUINX","Math","round","getTime","dataName","daName","dataQ","metricName","after","pollInterval","loading","info","console","getMeasurements","unit","measurementData","forEach","measurement","newMeasurementWithTime","utcString","at","toUTCString","dateTime","Date_Time","time","push","Fragment","length","width","margin","top","right","left","bottom","dataKey","interval","offset","angle","strokeDasharray","stroke","dot","formControl","spacing","minWidth","maxWidth","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","GET_METRICS","getMetrics","handleChange","SelectedDataName","FormControl","InputLabel","id","Select","labelId","multiple","onChange","input","Input","renderValue","selected","join","map","MenuItem","key","Checkbox","checked","indexOf","ListItemText","GET_EPOCH","card","useState","setSelectedDataName","numOfNames","gridSize","Card","ListSelect","event","target","CardContent","Grid","container","item","xs","ChartCard","heartBeat","ApolloClient","uri","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","default","App","CssBaseline","Header","ChartContainer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.430b9346.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: '',\n  locationName: '',\n};\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const { description, locationName, temperatureinCelsius } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { actions as WeatherActions, ApiErrorAction } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(WeatherActions.weatherApiErrorReceived.type, apiErrorReceived);\n}\n","import { spawn } from 'redux-saga/effects';\nimport weatherSaga from '../Features/Weather/saga';\n\nexport default function* root() {\n  yield spawn(weatherSaga);\n}\n","import { reducer as weatherReducer } from '../Features/Weather/reducer';\n\nexport default {\n  weather: weatherReducer,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\nimport sagas from './sagas';\nimport reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from './reducer';\nimport { Provider, createClient, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nconst query = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from '../Features/Weather/Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"Peter's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import CardHeader from '@material-ui/core/CardHeader';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst styles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.primary.main,\n  },\n  title: {\n    color: 'white',\n  },\n});\nexport default withStyles(styles)(CardHeader);\n","import React from 'react';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label } from 'recharts';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { toast } from 'react-toastify';\n\nconst GET_MEASUREMENTS = gql`\n  query getMeasurements($metricInfo: MeasurementQuery) {\n    getMeasurements(input: $metricInfo) {\n      metric\n      at\n      value\n      unit\n    }\n  }\n`;\n\nexport default props => {\n  //to get time and minus 30 min's and send back to sever as UINX time-stamp\n  var queryTime = new Date(props.epochTime);\n  queryTime.setMinutes(queryTime.getMinutes() - 30);\n  const queryTimeUINX = Math.round(queryTime.getTime() / 1000);\n  //get metric name\n  const dataName = props.daName;\n  //setup query\n  const dataQ = { metricName: dataName, after: queryTimeUINX };\n\n  const { loading, error, data } = useQuery(GET_MEASUREMENTS, {\n    variables: { 'metricInfo': dataQ },\n    pollInterval: 200,\n  });\n//error handling/check if loading\nif (loading){\n  toast.info(`loading Please wait..`)\n  return (<p>loading...</p>);\n  }\n  if (error) {\n    console.error(error);\n    toast.error(`Error Received: ${error}`)\n    return (<p>Error...</p>)\n  }\n  const { getMeasurements } = data;\n\n  const { unit } = getMeasurements[0];\n  let measurementData = [];\n  getMeasurements.forEach(measurement => {\n    let newMeasurementWithTime = measurement;\n    let dateTimeObj = new Date(measurement.at);\n\n    let utcString = dateTimeObj.toUTCString();\n\n    newMeasurementWithTime.dateTime = { Date_Time: utcString.slice(-11, -4) };\n    newMeasurementWithTime.time = utcString.slice(-25, -4);\n    measurementData.push(newMeasurementWithTime);\n  });\n\n\n  return (\n    <React.Fragment>\n      <h2>{`${dataName} Value: ${measurementData[measurementData.length - 1].value} ${unit}`}</h2>\n      <ResponsiveContainer width=\"100%\" height={280}>\n        <LineChart data={measurementData} margin={{ top: 4, right: 0, left: 5, bottom: 5 }}>\n          <XAxis dataKey=\"time\" interval=\"preserveStartEnd\">\n            <Label value={dataName} offset={-6} position=\"insideBottomLeft\" />\n          </XAxis>\n          <YAxis offset={6} label={{ value: `units measured in ${unit}`, angle: -90, position: 'insideBottomLeft' }} />\n\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"value\" stroke=\"#82ca9d\" dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment>\n  );\n};\n","import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { toast } from 'react-toastify';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n\n  const useStyles = makeStyles(theme => ({\n    formControl: {\n      margin: theme.spacing(1),\n      minWidth: 220,\n      maxWidth: 400,\n    }\n  }));\n  \n  const ITEM_HEIGHT = 48;\n  const ITEM_PADDING_TOP = 8;\n  const MenuProps = {\n    PaperProps: {\n      style: {\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n        width: 250,\n      },\n    },\n  };\n  \n  const GET_METRICS = gql`\n  {\n    getMetrics\n  }\n`;\n\n\n  export default (props) => {\n    const classes = useStyles(0);\n    const { loading, error, data } = useQuery(GET_METRICS);\n\n    if (loading) return (\n      toast.info(`loading Please wait..`),\n      <p>loading...</p>\n    );\n    if (error) return (\n      toast.error(`Error Received: ${error}`),\n      <p>Error...</p>\n    );\n      const {getMetrics} = data;\n      \n  \n    const { handleChange, SelectedDataName} = props;\n  return (\n        <FormControl className={classes.formControl}>\n          <InputLabel id=\"site-metric-Select\">Work Site Metric Data</InputLabel>\n          <Select\n            labelId=\"site-metric-Select\"\n            id=\"work-site-metric-selecter\"\n            multiple\n            value={SelectedDataName}\n            onChange={handleChange}\n            input={<Input />}\n            renderValue={selected => selected.join(', ')}\n            MenuProps={MenuProps}\n          >\n            {getMetrics.map(name => (\n              <MenuItem key={name} value={name}>\n                <Checkbox checked={SelectedDataName.indexOf(name) > -1} />\n                <ListItemText primary={name} />\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n  );\n  };","import React, {useState} from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { toast } from 'react-toastify';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from './CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ChartCard from '../Features/API-Chart/ChartCard';\nimport ListSelect from '../Features/API-Chart/ListSelect';\n\nconst GET_EPOCH = gql`\n{\n  heartBeat\n}\n`;\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  card: {\n    margin: '5% 0.5%',\n  }\n}));\n\n\nexport default () => {\n  const classes = useStyles(0);\n  const [SelectedDataName, setSelectedDataName] = useState([]);\n  const { loading, error, data } = useQuery(GET_EPOCH);\n\n  if (loading) return (\n    <p>loading...</p>\n  );\n  if (error) return (\n    toast.error(`Error Received: ${error}`),\n    <p>Error...</p>\n  );\n\n  // Hackey solution For scaling chart sizes Check what the current Amount of Selected items there are and it just size as necessary\n  let numOfNames = SelectedDataName.length;\n  let gridSize = 12;\n\n  if (numOfNames >= 3) {\n    gridSize = 4;\n  } else if (numOfNames === 2) {\n    gridSize = 6;\n  }\n  \n  const handleChange = event => {\n    setSelectedDataName(event.target.value);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Card className={classes.card}>\n        <CardHeader title=\"Select Metric to view\" />\n        <ListSelect handleChange={handleChange} SelectedDataName={SelectedDataName}/>\n        <CardContent>\n          <Grid container spacing={3}>\n            {SelectedDataName.map(dataName => (\n              <Grid item xs={gridSize} key={dataName}>\n                <ChartCard daName={dataName} epochTime={data.heartBeat}/>\n              </Grid>\n            ))}\n          </Grid>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n","import React from 'react';\nimport createStore from './store';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport ChartContainer from './components/ChartContainer';\n\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nconst client = new ApolloClient({\n  uri: 'https://react.eogresources.com/graphql',\n});\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <Wrapper>\n          <Header />\n          <ChartContainer />\n          <ToastContainer />\n        </Wrapper>\n      </Provider>\n    </MuiThemeProvider>\n  </ApolloProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}